<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on DamNotes</title>
    <link>https://damnotes.netlify.com/c/</link>
    <description>Recent content in C on DamNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://damnotes.netlify.com/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Concepts</title>
      <link>https://damnotes.netlify.com/c/01-basic-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/01-basic-concepts/</guid>
      <description>Basics int var_name = value; // variable initialization char str_name[n]; // array initialization char str_name[] = &amp;#34;Hello World!&amp;#34;; const int VAR_NAME = value; // constant declaration  int main (void) { // execution start from here  // code  return 0; }  Best practice: variables are named with capital letters when global
 Math operators &amp;rarr; +, -, *, /, % (mod)
 For each string of n charachters, n+1 bytes are allocated in memory: the last is added by C as the null character \0 (all zeros)</description>
    </item>
    
    <item>
      <title>stdio.c</title>
      <link>https://damnotes.netlify.com/c/02-stdio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/02-stdio/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt;  printf( &amp;rarr; Possible placeholders:
 %c (single char), %s (string),
 %i (integer), %f (float), %u (unsigned decimal integer)
 %p (pointer)
  scanf(&amp;quot;%i&amp;quot;, &amp;amp;varName) &amp;rarr; wait user input. Various placeholders are available (number in different bases, strings,&amp;hellip;). Return the number of characters written, or a negative number if some errors occured. WARNING: the input should be checked for correctness
  </description>
    </item>
    
    <item>
      <title>unistd.c</title>
      <link>https://damnotes.netlify.com/c/03-unistd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/03-unistd/</guid>
      <description>#include &amp;lt;unistd.h&amp;gt;  sleep(i) &amp;rarr; suspend code execution for at least i seconds  </description>
    </item>
    
    <item>
      <title>string.c</title>
      <link>https://damnotes.netlify.com/c/04-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/04-string/</guid>
      <description>#include &amp;lt;string.h&amp;gt; In this context, s usually represent the pointer to the string.
 strlen(s) &amp;rarr; return lenght of the string
 strcmp(s1, s2) &amp;rarr; compare the two strings. Return 0 if the two strings are equal
 strcpy(s1, s2) &amp;rarr; copy s2 into s1
  </description>
    </item>
    
    <item>
      <title>ctype.c</title>
      <link>https://damnotes.netlify.com/c/05-ctype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/05-ctype/</guid>
      <description>#include &amp;lt;ctype.h&amp;gt;  isdigit(int) &amp;rarr; return non-zero if the provided value is a digit
 isalnum(int) &amp;rarr; retutn non-zero if the provided value is a digit or a letter
  </description>
    </item>
    
    <item>
      <title>stdlib.c</title>
      <link>https://damnotes.netlify.com/c/06-stdlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/06-stdlib/</guid>
      <description>#include &amp;lt;stdlib.h&amp;gt;  malloc(size) &amp;rarr; try to allocate requested memory size (in bytes) and returns a pointer to the first byte
// allocate space for 4 integer numbers int *p = malloc(4 * sizeof(int));  Segmentation fault: error caused by the fact that the program is trying to access memory that it should not use
 When allocating memory, PCs usually allocate a little bit more to avoid problems
  free(pointName) &amp;rarr; deallocate memory previously allocated with malloc.</description>
    </item>
    
  </channel>
</rss>