<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DamNotes</title>
    <link>https://damnotes.netlify.com/</link>
    <description>Recent content on DamNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://damnotes.netlify.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Animations</title>
      <link>https://damnotes.netlify.com/css/01-animations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/01-animations/</guid>
      <description>An animation requires 3 thing:
 The start state of the animation The end state of the animation How long it should take to go from start to end state (speed of the animation)
* { /_there are 8 animation properties total_/ animation-duration: 2s; animation-name: some-name; animation-iteration-count: infinite; /*number of iteration of the animation*/ animation-timing-function: linear; /*changing the animation speed evolution*/ animation-fill-mode: forwards; /*specify the style applied to an element when the animation has finished:*/ animation-iteration-count: 4; /*numbero of iterations - can be infinite*/ } Define the animation</description>
    </item>
    
    <item>
      <title>Bash Scripts</title>
      <link>https://damnotes.netlify.com/bash/01-bash-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/bash/01-bash-scripts/</guid>
      <description>Making Custom Commands  Access the .bashrc file with
nano ~/.bashrc  Open with nano and not with open, otherwise problems may occur when applying the following steps.
 Inside the file, write the following
alias command_name=&amp;#34;command1 &amp;amp;&amp;amp; command2 &amp;amp;&amp;amp; ...&amp;#34;  The &amp;amp;&amp;amp; apply the following command only if the current one is succesfull. On the other hand, use ; to run all the commands one after the other.</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>https://damnotes.netlify.com/c/01-basic-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/01-basic-concepts/</guid>
      <description>Basics int var_name = value; // variable initialization char str_name[n]; // array initialization char str_name[] = &amp;#34;Hello World!&amp;#34;; const int VAR_NAME = value; // constant declaration  int main (void) { // execution start from here  // code  return 0; }  Best practice: variables are named with capital letters when global
 Math operations → +, -, *, /, % (mod)
 For each string of n charachters, n+1 bytes are allocated in memory: the last is added by C as the null character \0 (all zeros)</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>https://damnotes.netlify.com/python/00-basic-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/00-basic-concepts/</guid>
      <description>Variable Types Lists l = [100, 21, 88, 3] l = list() #empty list # List Comprehension -&amp;gt; quick list creation evens_to_50 = [i for i in range(51) if i % 2 == 0] other_list = [[i,j] for i in range(x) for j in range(y) if (x+y)!=n] # Element selection l[:2] # first two items (0 and 1) l[3:] # ourth through last items l[::2] # first through end with a step of 2 ## in general [start(inclusive):end(exclusive):stride] ## negative stride progress the list in reverse order # Multi-index lists l = [0, 1, 2, 3; 4, 5, 6, 7] l[1][2] #6  l1 + l2 → concatenate lists</description>
    </item>
    
    <item>
      <title>Document Structure</title>
      <link>https://damnotes.netlify.com/html/01-document-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/html/01-document-structure/</guid>
      <description> Document Declaration Boilerplate code → some code that one has to every page of code.
&amp;lt;@DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My Coding Journal&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  &amp;lt;@DOCTYPE hmtl&amp;gt; → declaration &amp;lt;head&amp;gt; → it contain metadata of the webpage  Non-Semantic Tags Non-semantic tag → it does not describe the type of content it has inside.
 &amp;lt;div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;span&amp;gt; &amp;lt;/span&amp;gt;  Semantic Tags  &amp;lt;header&amp;gt; &amp;lt;footer&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;main&amp;gt; &amp;lt;article&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;section&amp;gt; &amp;lt;detail&amp;gt;  </description>
    </item>
    
    <item>
      <title>NumPy</title>
      <link>https://damnotes.netlify.com/python/01-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/01-numpy/</guid>
      <description>import numpy as np array[index1, index2] # access an element. Use : to access the all line array[start:stop:stride] # array slicing np.nditer(array) # create an iterator object to be used in for loops # Array generation np.array(list) # create array from list np.arange(first, size, spacing) # generate array np.linspace(first, last, size) # generate array, both end points are included np.logspace(first, last, size, base=e) # generate log-spaced array np.zeros((dim1,dim2)) # create array full of 0s np.</description>
    </item>
    
    <item>
      <title>Quick Reference</title>
      <link>https://damnotes.netlify.com/hugo/01-quick-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/01-quick-reference/</guid>
      <description> hugo new site site-name → create new project
 hugo version → check version installed
 hugo server → start local server on localhost:1313
 hugo server -D → compile also drafts  hugo → build the project
 hugo -D → build also drafts  hugo new path/to/file.md → create new files in /content/ directory
  </description>
    </item>
    
    <item>
      <title>Colors</title>
      <link>https://damnotes.netlify.com/css/02-colors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/02-colors/</guid>
      <description>General color: #AABBCC; &amp;ndash;&amp;gt; hex values
color: rgb(0,255,255); &amp;ndash;&amp;gt; rgb values
color: rgb(5%,50%,100%); &amp;ndash;&amp;gt; rgb values
color: rgba(255,255,255,0.5); &amp;ndash;&amp;gt; rgb with opacity between 0 and 1
color: hsl(180,100%,50%); &amp;ndash;&amp;gt; HSL is supported only by CSS3, so older browser can have problem with the encoding of this statement
 hue 0°-360° (color) saturation % (amount of gray in a given color) lightness % (amount of white in a given color)  Background background-color: green;</description>
    </item>
    
    <item>
      <title>File Naming System</title>
      <link>https://damnotes.netlify.com/html/02-file-naming-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/html/02-file-naming-system/</guid>
      <description> index.html is always the root for the homepage of a website, so for example www.yoursite.com
 Every page of the website needs an appropriate HTML file, e.g. the about page at www.yoursite.com/about.html will be contained in the about.html file
  </description>
    </item>
    
    <item>
      <title>Front Matter</title>
      <link>https://damnotes.netlify.com/hugo/02-front-matter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/02-front-matter/</guid>
      <description>Informations between the two --- is called front matter.
 draft: true → mark post as draft
 image: &amp;quot;static/path-to-image.jpeg&amp;quot; → set the default post image (usuallly placed in the static directory)
 tags: [&#39;tag1&#39;, &#39;tag2&#39;] → post tags
 categories: [&#39;category1&#39;, ...] → post categories
 publishdate: → set a publishing date for the post (if the build date is previous the one indicated, the post will not be published)</description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://damnotes.netlify.com/python/02-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/02-pandas/</guid>
      <description>import pandas as pd # df creations pd.Series([list]) # create a Series object pd.DataFrame(dict) # create df from dictionary pd.DataFrame(data=[list], index=None, columns=None, dtype=None, copy=False) # create df from list  df → DataFrame s → Series Jupyter Notebook lessons on pandas  File I/O Import file into a df
df = pd.read_csv(r’relative_path’, #can be a web address sep = &amp;#39; &amp;#39;, usecols = [0, 1, 5] # columns to be returned from the file names = [&amp;#39;column1&amp;#39;,&amp;#39;column2&amp;#39;,.</description>
    </item>
    
    <item>
      <title>stdio.c</title>
      <link>https://damnotes.netlify.com/c/02-stdio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/02-stdio/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; Vedi funzionr printf() + placeholder %s, %i, %f (float) + f mena format
scanf(&amp;ldquo;%i&amp;rdquo;, &amp;amp;varName) scanf(&amp;ldquo;%s&amp;rdquo;, s)
%p → prin the pointer</description>
    </item>
    
    <item>
      <title>Content Positioning</title>
      <link>https://damnotes.netlify.com/css/03-content-positioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/03-content-positioning/</guid>
      <description>Display display: block; → the element occupies all the width of the parent element
display: inline; → the elements are arranged horizontally
display: none; → not rendered
Dimensions All elements on a web page are interpreted by the browser as “living” inside of a box.
width: 150px;
 min-width and max-width also possible  height: 70%;
 min-heigth and max-height also possible  Content Based width: min-content; → wrap the content and use the minimum space</description>
    </item>
    
    <item>
      <title>Folder Structure</title>
      <link>https://damnotes.netlify.com/hugo/03-folder-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/03-folder-structure/</guid>
      <description>Archetypes Set the front matter for different content types.
 archetypes/default.md → default front matter for new content
---title:&amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34;&amp;#34; | title }}&amp;#34;date:{{.Date}}draft:true---  Config  Used to store various different configurations. If the number of configuration is limited, one can just use a single config.toml file. Also .json and .yaml can be used. To see more about configurations and configure each site properly, visit this page  Content  Directory used to store all the text file for all the contents.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://damnotes.netlify.com/html/03-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/html/03-forms/</guid>
      <description>&amp;lt;form action=&amp;#34;process.php&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; &amp;lt;!--action and method attribute are server-side thing--&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!--used to place the elements on different lines--&amp;gt; &amp;lt;label&amp;gt;First Name&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;firstName&amp;#34; placeholder=&amp;#34;Enter first name&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br&amp;gt; &amp;lt;!--line breaker-don’t use, use CSS--&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;Last Name&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;lastName&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;email&amp;#34; name=&amp;#34;email&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;Message&amp;lt;/label&amp;gt; &amp;lt;textarea name=&amp;#34;message&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;!--textarea is a bigger input region for longer text--&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label&amp;gt;Gender&amp;lt;/label&amp;gt; &amp;lt;select name=&amp;#34;gender&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;male&amp;#34;&amp;gt;Male&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;female&amp;#34;&amp;gt;Female&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;other&amp;#34;&amp;gt;Other&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://damnotes.netlify.com/python/03-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/03-matplotlib/</guid>
      <description>Jupyter Notebook tutorial on matplotlib. Official documentation
import matplotlib.pyplot as plt %matplotlib inline # display figures inside jupyter notebooks axes.plot(a, b, &amp;#39;b.-&amp;#39;, color = &amp;#39;#FFFFFF&amp;#39;, # color (control) alpha = 0.5, # lw = 3, # linewidth ls = &amp;#39;-&amp;#39;, # linestyle &amp;#39;-&amp;#39; &amp;#39;--&amp;#39; &amp;#39;-.&amp;#39; &amp;#39;:&amp;#39; &amp;#39;steps&amp;#39; marker =&amp;#39;+&amp;#39;, # markerstyle `+`, `o`, `*`, `s`, `,`, `.`, `1`, `2`, `3`,… ms = 3 # markersize ) Basic figure script Create a small figure on top of another one #request text elements rendering with Latex matplotlib.</description>
    </item>
    
    <item>
      <title>unistd.c</title>
      <link>https://damnotes.netlify.com/c/03-unistd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/03-unistd/</guid>
      <description>Vedi funzione sleep(i)</description>
    </item>
    
    <item>
      <title>Content Organization</title>
      <link>https://damnotes.netlify.com/hugo/04-content-organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/04-content-organization/</guid>
      <description>General Concepts  Content should be organised in such a way to reflect the rendered site. Contents in the content directory can be nested at any level The top levels (i.e. content/&amp;lt;DIRECTORIES&amp;gt;) are considered the content type used to determine layouts etc.   Here, baseurl = &amp;quot;https://example.com&amp;quot; is assumed in the config.toml file One can keep one _index.md for the homepage and one in each content sections, taxonomies, and taxonomy terms.</description>
    </item>
    
    <item>
      <title>Flexbox</title>
      <link>https://damnotes.netlify.com/css/04-flexbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/04-flexbox/</guid>
      <description>Everything refers back to the main axis and the cross axis of the container.
 For a complete guide visit CSS Tricks
 Properties of the parent display: flex; &amp;ndash;&amp;gt; the element becomes a flex-container - its child items becomes flex-items (only the direct descendants)
flex-direction: row; &amp;ndash;&amp;gt; row, row-reverse, column, column-reverse set the main axis of the flex container
flex-wrap: wrap; &amp;ndash;&amp;gt; wrap the flex-items if necessary
 flex-flow: flex-direction flex-wrap;  justify-content: center; &amp;ndash;&amp;gt; justify along the main axis</description>
    </item>
    
    <item>
      <title>Images</title>
      <link>https://damnotes.netlify.com/html/04-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/html/04-images/</guid>
      <description>Self-closing tag
&amp;lt;img src=&amp;#34;https://www.example.com/picture.jpg&amp;#34; alt=&amp;#34;A field of yellow sunflowers&amp;#34;/&amp;gt;  src → attribute with the url of the image alt → description of what one can see  if an image fails to load on a web page, a user can mouse over the area originally intended for the image and read a brief description of the image. visually impaired users often browse the web with the aid of of screen reading software.</description>
    </item>
    
    <item>
      <title>Seaborn</title>
      <link>https://damnotes.netlify.com/python/03b-seaborn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/03b-seaborn/</guid>
      <description>(Docs)
import seaborn as sns sns.set() tips = sns.load_dataset(&amp;#34;tips&amp;#34;) # or just load a dataframe with pandas sns.relplot(x = &amp;#34;total_bill&amp;#34;, y = &amp;#34;tip&amp;#34;, col = &amp;#34;time&amp;#34;, hue = &amp;#34;smoker&amp;#34;, style = &amp;#34;smoker&amp;#34;, size = &amp;#34;size&amp;#34;, data = tips);  sns.set() set the style of the plot using matplotlib standards (doc)  </description>
    </item>
    
    <item>
      <title>string.c</title>
      <link>https://damnotes.netlify.com/c/04-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/04-string/</guid>
      <description>Vedi funzione strlen(string), strcmp(str1, str2), strcpy(s1, s2)</description>
    </item>
    
    <item>
      <title>Grid</title>
      <link>https://damnotes.netlify.com/css/05-grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/05-grid/</guid>
      <description>For a complete guide visit CSS Tricks
 Dictionary  Line &amp;ndash;&amp;gt; the dividing lines that make up the structure of the grid; Track &amp;ndash;&amp;gt; the space between two adjacent grid lines; Area &amp;ndash;&amp;gt; the total space surrounded by four grid lines;  Properties of the parent (container) display: grid; &amp;ndash;&amp;gt; create a grid container
 grid, inline-grid  grid-template-columns: track-size1 track-size2 ...;
 can be expressed in fr  grid-template-rows: track-size1 track-size2 .</description>
    </item>
    
    <item>
      <title>Text Elements</title>
      <link>https://damnotes.netlify.com/html/05-text-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/html/05-text-elements/</guid>
      <description>Common Text  &amp;lt;!-- --&amp;gt; → comments in html5 &amp;lt;h1&amp;gt; &amp;lt;h2&amp;gt; &amp;lt;h3&amp;gt; &amp;lt;h4&amp;gt; &amp;lt;h5&amp;gt; &amp;lt;h6&amp;gt; → headings &amp;lt;p&amp;gt; → paragraph _ Spaces and returns don’t affect the appearance of the code. _ To break the line in one paragraph (without changing paragraph) use the tag &amp;lt;br /&amp;gt; &amp;lt;em&amp;gt; → italics &amp;lt;strong&amp;gt; → bold style=“color: blue” → attribute to change color to apply CSS only to that tag  Lists &amp;lt;ul&amp;gt; &amp;lt;il&amp;gt; item 1 &amp;lt;/il&amp;gt; &amp;lt;il&amp;gt; item 2 &amp;lt;/il&amp;gt; &amp;lt;il&amp;gt; item 3 &amp;lt;/il&amp;gt; &amp;lt;/ul&amp;gt;  Use it outside the &amp;lt;p&amp;gt; tag.</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>https://damnotes.netlify.com/hugo/05-themes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/05-themes/</guid>
      <description>  Add a theme as a submodule using git submodule add github-link themes/theme-name in the website root Hugo applies the decided theme first and then applies anything that is in the local directory. To set a theme, add theme= theme_name to the config.toml file.  Create a Theme  To create a new theme use hugo new theme theme-name  </description>
    </item>
    
    <item>
      <title>ctype.c</title>
      <link>https://damnotes.netlify.com/c/05-ctype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/05-ctype/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://damnotes.netlify.com/hugo/06-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/06-functions/</guid>
      <description>All functions are reported in the documentation.
 {{ .Site.Params.homeText | markdownify }} → access the site parameter homeText (in the config file) and apply the markdownify function
 {{ $css := &amp;quot;css/bootstrap.min.css&amp;quot; | absURL }} → define a variable and apply the absURL function
 {{ hugo.Generator }} → add in the html head to display the hufo version as a metadata in the source code
  String Manipulation  {{ print SOMETHING }} → print the argument using the Golang print function.</description>
    </item>
    
    <item>
      <title>Measurement Units</title>
      <link>https://damnotes.netlify.com/css/06-measurement-units/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/06-measurement-units/</guid>
      <description>vw, vh, vmin, vmax, rem
px -&amp;gt; pixels are used to set the exact size of an element
em -&amp;gt; the em represents the size of the base font being used. It is a relative unit of measurement. They change the size of text relative to the parent element’s size of text
rem -&amp;gt; it means root em. Instead of checking parent elements to size font, it checks the root element.</description>
    </item>
    
    <item>
      <title>Tensorflow</title>
      <link>https://damnotes.netlify.com/python/06-tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/06-tensorflow/</guid>
      <description>import tensorflow as tf
 from tensorflow.python.data import Dataset → select the data module in the Python API of Tensorflow and import a class
  tf.data module  Docs Dataset class (doc)  tf.feature_column module  tf.feature_column.numeric_column → create a numeric column for the model (doc).
 tf.feature_column.bucketized_column(source_column, boundaries) → takes a numeric column as input and apply binning using boundaries (doc).
 tf.feature_column.cross_column() → returns a column to perform crosses of categorical features (doc)</description>
    </item>
    
    <item>
      <title>stdlib.c</title>
      <link>https://damnotes.netlify.com/c/06-stdlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/c/06-stdlib/</guid>
      <description>vedi malloc(memoryAmount) [allocate memory]
e.g. malloc(strlen(s)+1 * sizeof(char))
free(pointerName) [deallocate memory]
If memory is not deallocated, program can cause memory leaks. !! Always free memory allocated with malloc!!
 Segmentation fault: error caused by the fact that I try to access to memory that I should not use.
 When allocating memory, PCs usually allocate a little bit more to avoid problems.
  realloc() reallocate memory in the (heap part) if available.</description>
    </item>
    
    <item>
      <title>Configuration File</title>
      <link>https://damnotes.netlify.com/hugo/07-config-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/hugo/07-config-file/</guid>
      <description>It is possible to set different url permalink per section. See here for more informations
[permalinks] blog = &amp;#34;/:filename/&amp;#34;</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://damnotes.netlify.com/css/07-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/07-variables/</guid>
      <description>Define the variable using
body { --var-name: value; }  It becomes available to use inside the element in which you create it and within any elements nested within it.
 By creating your variables in :root, they will be available throughout the whole web page
:root { --var-name: value; }  One can then over-write these variables by setting them again within a specific element.
 Assign the variable using</description>
    </item>
    
    <item>
      <title>File Naming System</title>
      <link>https://damnotes.netlify.com/css/08-file-naming-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/08-file-naming-system/</guid>
      <description> Insert this in the &amp;lt;head&amp;gt; tag of the .html file
&amp;lt;link href=&amp;#34;https://www.codecademy.com/stylesheets/style.css&amp;#34; type=&amp;#34;text/css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;  </description>
    </item>
    
    <item>
      <title>Os</title>
      <link>https://damnotes.netlify.com/python/08-os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/08-os/</guid>
      <description>import os import datetime Os  os.getcwd() obtain the current working directory os.listdir(path) list all file in the path. Better using scandir() for more performance os.chdir(path) change the cwd to path os.remove(path) remove a file
 os.mkdir(path) create a directory. To avoid errors if the directory exist, use
dirName = &amp;#39;tempDir&amp;#39; try: # Create target Directory os.mkdir(dirName) print(&amp;#34;Directory &amp;#34; , dirName , &amp;#34; Created &amp;#34;) except FileExistsError: print(&amp;#34;Directory &amp;#34; , dirName , &amp;#34; already exists&amp;#34;) os.</description>
    </item>
    
    <item>
      <title>Media Queries</title>
      <link>https://damnotes.netlify.com/css/09-media-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/09-media-queries/</guid>
      <description> Application  Apply when width is less than 600px
@media (max-width:600px) { h1 { font-size: 12px; } }  See p.172 pro HTML5&amp;hellip; for every query.
 max-width min-width max-height min-height  Breakpoints  Magari usa 600, 900, 1200 e se vuoi 1800
/* Extra small devices (phones, 600px and down) */ @media only screen and (max-width: 600px) {} /* Small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {}  Measurements * { height: 100vh; /* viewport height - like %, but based on the viewport and not on the parent element measure*/ width: 100vw; /*viewport width*/ width: 100vmin; /*minimum between viewport height or width*/ width: 100vmax; /*maximum between viewport height or width*/ height: 2em; /*em is the font size of the browser*/ }</description>
    </item>
    
    <item>
      <title>Pseudo Class</title>
      <link>https://damnotes.netlify.com/css/10-pseudo-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/10-pseudo-class/</guid>
      <description>Changing color of a link when hover on it
a:hover { color: red; } Add something before or after a selected element
.class::before { content: &amp;#34;Phrase&amp;#34;; /*here you can modify the properties of the added thing/shape*/ }  The content property is used to add an image or a text as the element to be added. If you use it to do a shape, place an empty string.</description>
    </item>
    
    <item>
      <title>PyTorch</title>
      <link>https://damnotes.netlify.com/python/11-pytorch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/11-pytorch/</guid>
      <description>PyTorch  Import using import torch torch.manual_seed(n) set seeds for random number generation torch.randn((n1, n2, n3, ...)) return a random tensor with dimensions n1, n2,…, mean 0 and variance 1 doc torch.randn_like(input) return a random tensor normal distributed with the size of tensor ininput doc torch.mm(tensor1, tensor2) -&amp;gt; matrix multiplication of two tensors  Torch and Numpy  torch.from_numpy(tensor) -&amp;gt; transform an array into a tensor for Torch tensor.numpy() -&amp;gt; transform a tensor into an array Memory of the 2 data structures is shared: if one changes the values in-place (with a _ operation) of one object, the other will change as well.</description>
    </item>
    
    <item>
      <title>Selectors</title>
      <link>https://damnotes.netlify.com/css/11-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/11-selectors/</guid>
      <description>General Technique BEM technique (Block Element Modifiers) Use only on classes
.block__element--modifier { property: value; }  Specificity is the order by which the browser decides which CSS styles will be displayed. A best practice in CSS is to style elements while using the lowest degree of specificity, so that if an element needs a new style, it is easy to override. IDs are the most specific selector in CSS, followed by classes, and finally, tags.</description>
    </item>
    
    <item>
      <title>Text Properties</title>
      <link>https://damnotes.netlify.com/css/12-text-properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/css/12-text-properties/</guid>
      <description>Typography Import Fonts  Import in html using
&amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css?family=Cabin&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; Import in css file using
@import url(//fonts.googleapis.com/css?family=Cabin); Last term is called font-families and can be: _ cursive _ fantasy _ monospace _ sans-serif * serif
Font Assets   List of Web safe fonts Google Fonts  Properties Font Properties  font-family: Garamond , Times , serif; -&amp;gt; fonts after the first are called fallback fonts
 font-size: 30px; -&amp;gt; measured in px, em or %</description>
    </item>
    
    <item>
      <title>Jupyter notebooks</title>
      <link>https://damnotes.netlify.com/python/14-jupiter-notebooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/14-jupiter-notebooks/</guid>
      <description>Jupiter Notebooks Useful tutorial here
Here find a list of useful notebooks to download and learn from them.
 Run the jupiter server typing jupyter notebook in the command line To create a new file click new and the language you want to use in the notebook To run a cell use ctrl + enter. To run a cell and select below use shift + enter. Use option + enter to run a cell and insert below.</description>
    </item>
    
    <item>
      <title>Files I/O</title>
      <link>https://damnotes.netlify.com/python/16-files-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/16-files-io/</guid>
      <description>Files I/O Use
import csv in your program.
SIMPLE READ .CSV FILE Use with to automatically close the file at the end
with open(&amp;#39;data.csv&amp;#39;,&amp;#39;r&amp;#39;) as csv_file: csv_reader = csv.reader(csv_file, delimiter=&amp;#39; &amp;#39;) # to skip over the header line next(csv_reader) for line in csv_reader: print(line) SIMPLE WRITE ON A NEW .CSV FILE with open(&amp;#39;data.csv&amp;#39;,&amp;#39;r&amp;#39;) as csv_file: csv_reader = csv.reader(csv_file, delimiter=&amp;#39; &amp;#39;) # open a new file with open(&amp;#39;new_file.csv&amp;#39;,&amp;#39;w&amp;#39;) as new_file: csv_writer = csv.</description>
    </item>
    
    <item>
      <title>Atom</title>
      <link>https://damnotes.netlify.com/python/19-python-in-atom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/19-python-in-atom/</guid>
      <description>Python in Atom Packages List  Script &amp;ndash; to run code in Atom * cmd + i to run the script Disable autocomplete-plus and autocomplete-snippest Install autocomplete-python Install file-icons Install minimap - when working on big screens and on big scripts Install python-autopep8 _ Enable Format on Save _ Install autopep8 with pip Install linter-flake8 &amp;ndash; to correct error * Install flake8 with pip  Editor Settings  Select Scroll past the end Tab lenght set to 4 To increase the font size go to Settings -&amp;gt; Themes -&amp;gt; Your Stylesheet and print</description>
    </item>
    
    <item>
      <title>Other Libraries</title>
      <link>https://damnotes.netlify.com/python/99-other-libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/99-other-libraries/</guid>
      <description>Datetime  datetime.today() → print current date  IPython .display module (doc)
from IPython import display # display various type of data (audio, images, ...)  display.display(obj) → display a python object in all frontends (doc)  PySerial (Docs)
import serial ser = serial.Serial(port = &amp;#39;/dev/tty.SLAB_USBtoUART&amp;#39;, baudrate = 9600, bytesize = serial.EIGHTBITS, parity = serial.PARITY_NONE, stopbits = serial.STOPBITS_ONE, timeout = 3 #s )  python -m serial.tools.list_ports → prints a list of available ports.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/linux/00-shortcuts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/linux/00-shortcuts/</guid>
      <description>Shortcuts ctrl + T crate new tab
ctrl + H show hidden files</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/linux/01-installation-and-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/linux/01-installation-and-setup/</guid>
      <description>Installation and Setup Ubuntu Setup on VM  Install linux guest addition to run the VM more stabily and with better performance (right screen resolution, less lag,&amp;hellip;)  Devices &amp;gt; Insert Guest Addition CD Image -&amp;gt; a VBoxAddition should appear on the desktop right click on VBoxLinuxAddition.run &amp;gt; properties and look if it is executable open the VBoxAddition&amp;hellip; &amp;gt; right click &amp;gt; Open in Terminal &amp;gt; sudo ./VBoxLinuxAdditions.run reboot the system   Customizing Linux One wants to dowload some themes to customize the look of the GUI.</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>https://damnotes.netlify.com/git/01-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/01-basics/</guid>
      <description>git init &amp;lt;directory_path&amp;gt; create empty git repository in the specified directory. Omit the arguments to initialise in the current directory git add &amp;lt;file/directory&amp;gt; stage all changes in the provided path for the next commit git commit -m “&amp;lt;message&amp;gt;” commit the staged changes with the message provided. Messages must be  in quotation marks; written in the present tense; be brief (50 characters or less) when using -m  git status list staged, unstaged and untracked files git diff show unstated changes between the index and the working directory  git diff &amp;lt;file&amp;gt; preview the differences between the file in the working directory and the one in the staging area  git log display the entire commit history.</description>
    </item>
    
    <item>
      <title>Branches</title>
      <link>https://damnotes.netlify.com/git/02-branches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/02-branches/</guid>
      <description> git branch list all the branches in the repo
 git branch &amp;lt;name&amp;gt; create a new branch
 git checkout -b &amp;lt;branch&amp;gt; create and switch to a new branch
 git checkout &amp;lt;branch&amp;gt; switch to an existing branch
 git merge &amp;lt;branch&amp;gt; merge the provided branch into the current branch
 git branch -d &amp;lt;branch&amp;gt; delete the selected branch
  </description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://damnotes.netlify.com/git/03-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/03-config/</guid>
      <description>The --global input means that one wants to apply this setting to all the project, not just the current one.
 git config --global user.name &amp;lt;name&amp;gt; -&amp;gt; define the author name to be used fo all commits by the current user
 git config --global user.email &amp;lt;email&amp;gt;
 git config --global alias. &amp;lt;alias-name&amp;gt; &amp;lt;git-command&amp;gt; -&amp;gt; create shortcut for a git command
 e.g. git config --global alias.ciao commit -m set git ciao to git commit -m  git config --global color.</description>
    </item>
    
    <item>
      <title>Core Concepts</title>
      <link>https://damnotes.netlify.com/ai/00-core-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/ai/00-core-concepts/</guid>
      <description>Definitions  Autonomy → The ability to perform tasks in complex environments without constant guidance by a user. Adaptivity → The ability to improve performance by learning from experience. Machine Learning → Systems that improve their performance in a given task with more and more experience or data. It can be somewhat considered a subfield of AI. Data Science → It is a recent umbrella term (term that covers several sub disciplines) that includes machine learning and statistics, certain aspects of computer science including algorithms, data storage, and web application development.</description>
    </item>
    
    <item>
      <title>HTML Anatomy</title>
      <link>https://damnotes.netlify.com/html/00-html-anatomy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/html/00-html-anatomy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linking to GitHub</title>
      <link>https://damnotes.netlify.com/git/04-linking-to-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/04-linking-to-github/</guid>
      <description> git init initialise the project
 git add . add everything to the staging area
 git commit -m &amp;quot;message&amp;quot; commit the files in the staging area
 Go to Github, create a new repository and copy the provided link
 git remote add origin &amp;lt;link&amp;gt; link the two repositories
 git push -u origin master push the master branch to the remote repository
  </description>
    </item>
    
    <item>
      <title>Machine Learning</title>
      <link>https://damnotes.netlify.com/ai/01-machine-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/ai/01-machine-learning/</guid>
      <description>Tips  Split the data set into two parts  training data → train the algorithm with this set test data → then test the algorithm here  Due to overfitting, neural networks can require massive amounts of data before they produce reliable prediction when compared to models obtained by linear regression. ~Learning to avoid overfitting and choose a model that is not too restricted, nor too flexible, is one of the most essential skills of a data scientist.</description>
    </item>
    
    <item>
      <title>Probability</title>
      <link>https://damnotes.netlify.com/ai/02-probability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/ai/02-probability/</guid>
      <description>Importance Ability to deal with uncertainty is crucial. This fact is given from the presence of noise in the data returned from every kind of sensor.
 Probability allows to quantify uncertainty using numbers, and after that numbers can be compared. It is usually not possible to draw conclusions about whether a particular number was right or wrong based on a single observation.  One way to express probability is by using odds (the ratio of the probabilities of an event happening to that of it not happening)</description>
    </item>
    
    <item>
      <title>Problem Solving</title>
      <link>https://damnotes.netlify.com/ai/03-problem-solving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/ai/03-problem-solving/</guid>
      <description>Search and Planning Problems First stage of the problem solving process → defining the choices and their consequences. One also need to define what the goal is or, in other words, when one can consider the problem solved.
 The state space → the set of possible situations. Transitions → possible moves between one state and another. One only counts direct transitions that can be accomplished with a single action.</description>
    </item>
    
    <item>
      <title>Remote Repositories</title>
      <link>https://damnotes.netlify.com/git/05-remote-repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/05-remote-repositories/</guid>
      <description>git clone &amp;lt;repository_path&amp;gt; &amp;lt;clone_name&amp;gt; clone the provided repository in the current path. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH
 git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt; create a new connection to a remote repository.
 After adding a remote, you can use &amp;lt;name&amp;gt; as a shortcut for &amp;lt;url&amp;gt; in other commands.
 git remote -v -&amp;gt; lists the name of the remote, origin, as well as its location</description>
    </item>
    
    <item>
      <title>Rewriting History</title>
      <link>https://damnotes.netlify.com/git/06-rewriting-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/06-rewriting-history/</guid>
      <description> git commit —amend replace the last commit with the staged changes and last commit combined
 Use with nothing staged to edit the last commit’s message  git rebase &amp;lt;base&amp;gt; …
  </description>
    </item>
    
    <item>
      <title>Undoing Changes</title>
      <link>https://damnotes.netlify.com/git/07-undoing-changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/git/07-undoing-changes/</guid>
      <description> git revert &amp;lt;commit&amp;gt; create new commit that undoes all of the changes made in &amp;lt;commit&amp;gt;, then apply it to the current branch
 git reset &amp;lt;file&amp;gt; remove the file from the stain area, but leave the working directory unchanged
  </description>
    </item>
    
  </channel>
</rss>