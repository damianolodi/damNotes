<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on DamNotes</title>
    <link>https://damnotes.netlify.com/python/</link>
    <description>Recent content in Python on DamNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://damnotes.netlify.com/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Classes</title>
      <link>https://damnotes.netlify.com/python/01-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/01-classes/</guid>
      <description>Classes are used to define objects in python. Every object has properties and associated methods (functons).
Class Definition class Person: def __init__(self, name, age): #(self, var1, var2) self.name = name #self.property_name = var1 self.age = age def my_func(self): print(&amp;#34;Hello my name is &amp;#34; + self.name)  The __init__() is needed in all classes definition and it is always executed when the class is being initiated. It is used to assign values to object properties, or other operations that are necessary to do when the object is being created.</description>
    </item>
    
    <item>
      <title>Core</title>
      <link>https://damnotes.netlify.com/python/02-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/02-core/</guid>
      <description>Lists  l = [100, 21, 88, 3] → initialize the list
 l = list() → create empty list
 len(list) → return the length of the list
  Manupulation  l.append(item) → add a new item at the end of the list
 min(list); max(list) → return min or max value of the list
 list.sort() → sort in ascendin order
 &amp;quot; &amp;quot;.join([&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;D&amp;quot;]) → combine list elements into the string &amp;ldquo;A B C D&amp;rdquo;</description>
    </item>
    
    <item>
      <title>IPython</title>
      <link>https://damnotes.netlify.com/python/03-ipython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/03-ipython/</guid>
      <description> .display module  from IPython import display → Used to dusplay various type of data (audio, images, &amp;hellip;) (doc).
 display.display(obj) → display a python object in all frontends (doc)
  </description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://damnotes.netlify.com/python/04-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/04-matplotlib/</guid>
      <description>Custom Plot Style This process is considered for a Windows machine where Python is installed using Miniconda 3 (for Anaconda it should be the same).
The idea is to create a custom style file in the same directory where all the styles are archived. The instruction reported on the documentation probably are correct only for a &amp;ldquo;normal&amp;rdquo; Python installation. This is the process to follow if Miniconda is installed:</description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://damnotes.netlify.com/python/05-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/05-pandas/</guid>
      <description>{df → DataFrame; s → Series}
 import pandas as pd
  File I/O  pd.read_csv(path); pd.read_json(path); pd.read_excel(path); → read .csv, .json or .xlsx file.
 pd.DataFrame(dict) → create a df from a dictionary.
 pd.to_csv(path); pd.to_json(path); pd.to_excel(path); → export to .csv, .json or .xlsx file.
  df manipulation  df.copy(deep=True) → copy the df indices and data (doc).  Statistics  df.corr(method=Pearson) → compute pairwise correlation of columns (doc) - (Pearson Correlation Coefficient - Wikipedia).</description>
    </item>
    
    <item>
      <title>Tensorflow</title>
      <link>https://damnotes.netlify.com/python/06-tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/06-tensorflow/</guid>
      <description>import tensorflow as tf
 from tensorflow.python.data import Dataset → select the data module in the Python API of Tensorflow and import a class
  tf.data module  Docs Dataset class (doc)  tf.feature_column module  tf.feature_column.numeric_column → create a numeric column for the model (doc).
 tf.feature_column.bucketized_column(source_column, boundaries) → takes a numeric column as input and apply binning using boundaries (doc).
 tf.feature_column.cross_column() → returns a column to perform crosses of categorical features (doc)</description>
    </item>
    
  </channel>
</rss>