<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on DamNotes</title>
    <link>https://damnotes.netlify.com/python/</link>
    <description>Recent content in Python on DamNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://damnotes.netlify.com/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/11-pytorch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/11-pytorch/</guid>
      <description>PyTorch  Import using import torch torch.manual_seed(n) set seeds for random number generation torch.randn((n1, n2, n3, ...)) return a random tensor with dimensions n1, n2,…, mean 0 and variance 1 doc torch.randn_like(input) return a random tensor normal distributed with the size of tensor ininput doc torch.mm(tensor1, tensor2) -&amp;gt; matrix multiplication of two tensors
Torch and Numpy torch.from_numpy(tensor) -&amp;gt; transform an array into a tensor for Torch
 tensor.numpy() -&amp;gt; transform a tensor into an array Memory of the 2 data structures is shared: if one changes the values in-place (with a _ operation) of one object, the other will change as well.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/12-scypy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/12-scypy/</guid>
      <description>ScyPy The SciPy framework builds on top of the low-level NumPy framework for multidimensional arrays, and provides a large number of higher-level scientific algorithms. See here for a Jupyter notebook tutorial on scypy
import scipy as sp #code/python/modules</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/13-sympy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/13-sympy/</guid>
      <description>SymPy It is a Computer Algebra System (CAS). Documentation Sage docs is in some aspects more powerful than SymPy, but both offer very comprehensive CAS functionality. The advantage of SymPy is that it is a regular Python module and integrates well with the IPython notebook.
See here for a Jupyter notebook tutorial on symp
import sympy as symp #code/python/modules</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/14-jupiter-notebooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/14-jupiter-notebooks/</guid>
      <description>Jupiter Notebooks Useful tutorial here
Here find a list of useful notebooks to download and learn from them.
 Run the jupiter server typing jupyter notebook in the command line To create a new file click new and the language you want to use in the notebook To run a cell use ctrl + enter. To run a cell and select below use shift + enter. Use option + enter to run a cell and insert below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/15-data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/15-data-structures/</guid>
      <description>Data Structures List Lists are the array of MATLAB, but can store different type of information, including list of lists.
 Index begin with 0 Call an element using my_list[index] Concatenate lists using + Insert new element in position i using listName.insert(i, element) Quick list creation -&amp;gt; called List Comprehension
evens_to_50 = [i for i in range(51) if i % 2 == 0] other_list = [[i,j] for i in range(x) for j in range(y) if (x+y)!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/16-files-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/16-files-io/</guid>
      <description>Files I/O Use
import csv in your program.
SIMPLE READ .CSV FILE Use with to automatically close the file at the end
with open(&amp;#39;data.csv&amp;#39;,&amp;#39;r&amp;#39;) as csv_file: csv_reader = csv.reader(csv_file, delimiter=&amp;#39; &amp;#39;) # to skip over the header line next(csv_reader) for line in csv_reader: print(line) SIMPLE WRITE ON A NEW .CSV FILE with open(&amp;#39;data.csv&amp;#39;,&amp;#39;r&amp;#39;) as csv_file: csv_reader = csv.reader(csv_file, delimiter=&amp;#39; &amp;#39;) # open a new file with open(&amp;#39;new_file.csv&amp;#39;,&amp;#39;w&amp;#39;) as new_file: csv_writer = csv.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/17-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/17-functions/</guid>
      <description> Functions Define a function using the following syntax
def function_name (&amp;lt;parameters&amp;gt;): &amp;lt;code&amp;gt;  substitute &amp;lt;parameters&amp;gt; with as many parameters as you wants  to assign a default value to the parameter use param_name = param_value parameters could be of any type  use return value to return a value recursion is allowed To return multiple variables use
def function_name (&amp;lt;parameters&amp;gt;): &amp;lt;code&amp;gt; return var1, var2, ... #code/python/tips
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/17-lambda-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/17-lambda-functions/</guid>
      <description> Lambda Functions Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments
lambda a, b: a+b lambda val: val &amp;gt; 1000000  Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope - - - - #code/python/tips  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/18-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/18-loops/</guid>
      <description>Loops and Conditionals Loops For loop The for loop iterate through all the elements of a list
a = [1, 2, ’hi’] for var in a: #... else: #... The else condition will be executed at the end of the loop, but not if one exit with break.
One can use for also on a string or on a dictionary
#a simple dictionary d = {&amp;#34;foo&amp;#34; : &amp;#34;bar&amp;#34;} for key in d: print d[key] #prints &amp;#34;bar&amp;#34; *Note that dictionaries are unordered, meaning that any time you loop through a dictionary, you will go through every key, but you are not guaranteed to get them in any particular order.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/19-python-in-atom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/19-python-in-atom/</guid>
      <description>Python in Atom Packages List  Script &amp;ndash; to run code in Atom  cmd + i to run the script  Disable autocomplete-plus and autocomplete-snippest Install autocomplete-python Install file-icons Install minimap - when working on big screens and on big scripts Install python-autopep8  Enable Format on Save Install autopep8 with pip  Install linter-flake8 &amp;ndash; to correct error  Install flake8 with pip   Editor Settings  Select Scroll past the end Tab lenght set to 4 To increase the font size go to Settings -&amp;gt; Themes -&amp;gt; Your Stylesheet and print</description>
    </item>
    
    <item>
      <title></title>
      <link>https://damnotes.netlify.com/python/20-virtual-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/20-virtual-environments/</guid>
      <description>Virtual Environments Install virtualenv if you don&amp;rsquo;t have it.
Creating a virtual environment cd into the project folder and type
conda create --name project-name-env dependecy1 dependency2 ...  Activate and deactivate environments To activate an environment type
source activate project-name-env  To deactivate use
source deactivate project-name-env  Export the environment To export the environment, to keep track and have the possibility to reproduce the environment if something go wrong, create a .</description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://damnotes.netlify.com/python/01-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/01-classes/</guid>
      <description>Classes are used to define objects in python. Every object has properties and associated methods (functons).
Class Definition class Person: def __init__(self, name, age): #(self, var1, var2) self.name = name #self.property_name = var1 self.age = age def my_func(self): print(&amp;#34;Hello my name is &amp;#34; + self.name)  The __init__() is needed in all classes definition and it is always executed when the class is being initiated. It is used to assign values to object properties, or other operations that are necessary to do when the object is being created.</description>
    </item>
    
    <item>
      <title>Core</title>
      <link>https://damnotes.netlify.com/python/02-core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/02-core/</guid>
      <description>Lists  l = [100, 21, 88, 3] → initialize the list
 l = list() → create empty list
 len(list) → return the length of the list
  Manupulation  l.append(item) → add a new item at the end of the list
 min(list); max(list) → return min or max value of the list
 list.sort() → sort in ascendin order
 &amp;quot; &amp;quot;.join([&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;D&amp;quot;]) → combine list elements into the string &amp;ldquo;A B C D&amp;rdquo;</description>
    </item>
    
    <item>
      <title>IPython</title>
      <link>https://damnotes.netlify.com/python/03-ipython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/03-ipython/</guid>
      <description> .display module  from IPython import display → Used to dusplay various type of data (audio, images, &amp;hellip;) (doc).
 display.display(obj) → display a python object in all frontends (doc)
  </description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://damnotes.netlify.com/python/04-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/04-matplotlib/</guid>
      <description>Custom Plot Style This process is considered for a Windows machine where Python is installed using Miniconda 3 (for Anaconda it should be the same).
The idea is to create a custom style file in the same directory where all the styles are archived. The instruction reported on the documentation probably are correct only for a &amp;ldquo;normal&amp;rdquo; Python installation. This is the process to follow if Miniconda is installed:</description>
    </item>
    
    <item>
      <title>Matplotlib 2</title>
      <link>https://damnotes.netlify.com/python/04b-matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/04b-matplotlib/</guid>
      <description>See here for a Jupyter notebook tutorial on matplotlib Official documentation
import matplotlib.pyplot as plt Use %matplotlib inline in Jupyter to display figures inside the notebooks
Basic figure script This script create a small figure on top of another one
#request text elements rendering with Latex matplotlib.rcParams.update({&amp;#39;font.size&amp;#39;: 18, &amp;#39;text.usetex&amp;#39;: True}) # create the figure object fig = plt.figure(figsize=(8,4), dpi=100) # create an axes object inside the figure # left, bottom, width, height (range 0 to 1) axes1 = fig.</description>
    </item>
    
    <item>
      <title>NumPy</title>
      <link>https://damnotes.netlify.com/python/07-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/07-numpy/</guid>
      <description>See here for a Jupyter notebook tutorial on numpy
import numpy as np Arrays creation and properties  numpy arrays are statically typed and homogeneous. The type of the elements is determined when the array is created. np.array(list) generate an array from a list np.shape(array) , np.size(array) , np.ndim(array)print dimensions, number of elements and number of dimensions of the array np.dtype(list) print the data type of the array  Array generation from functions  np.</description>
    </item>
    
    <item>
      <title>Os and Datetime</title>
      <link>https://damnotes.netlify.com/python/08-os-datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/08-os-datetime/</guid>
      <description>import os import datetime Os  os.getcwd() obtain the current working directory os.listdir(path) list all file in the path. Better using scandir() for more performance os.chdir(path) change the cwd to path os.remove(path) remove a file
 os.mkdir(path) create a directory. To avoid errors if the directory exist, use
dirName = &amp;#39;tempDir&amp;#39; try: # Create target Directory os.mkdir(dirName) print(&amp;#34;Directory &amp;#34; , dirName , &amp;#34; Created &amp;#34;) except FileExistsError: print(&amp;#34;Directory &amp;#34; , dirName , &amp;#34; already exists&amp;#34;) os.</description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://damnotes.netlify.com/python/05-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/05-pandas/</guid>
      <description>{df → DataFrame; s → Series}
 import pandas as pd
  File I/O  pd.read_csv(path); pd.read_json(path); pd.read_excel(path); → read .csv, .json or .xlsx file.
 pd.DataFrame(dict) → create a df from a dictionary.
 pd.to_csv(path); pd.to_json(path); pd.to_excel(path); → export to .csv, .json or .xlsx file.
  df manipulation  df.copy(deep=True) → copy the df indices and data (doc).  Statistics  df.corr(method=Pearson) → compute pairwise correlation of columns (doc) - (Pearson Correlation Coefficient - Wikipedia).</description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://damnotes.netlify.com/python/05b-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/05b-pandas/</guid>
      <description>See here for some Jupyter notebook lessons on pandas
import pandas as pd  pd.__version__ check version of the pandas API  File I/O df = pd.read_csv(r’relative_path’, sep=&amp;#39; &amp;#39;, names=[&amp;#39;column1&amp;#39;,&amp;#39;column2&amp;#39;,...], header=None, skiprows=1, skipfooter=3, index_col=False, skipinitialspace=True, parse_dates=[0], infer_datetime_format=True ) Import the cvs file in a DataFrame object. _ the path can also be a web address _ header=None is the line of the header, if present. _ nrows=5 number of rows to read, from the top of the file _ skiprows=5 and skipfooter=3, number of rows to skip from the start or the end of the file.</description>
    </item>
    
    <item>
      <title>PySerial</title>
      <link>https://damnotes.netlify.com/python/09-pyserial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/09-pyserial/</guid>
      <description>Documentation
import serial  python -m serial.tools.list_ports prints a list of available ports.  Port Opening ser = serial.Serial(	port=&amp;#39;/dev/tty.SLAB_USBtoUART&amp;#39;, baudrate=9600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=3 #s )  Serial open the port and create an object. * timeout set the time after which the reading process is stopped (in seconds)   #code/python/modules</description>
    </item>
    
    <item>
      <title>Seaborn</title>
      <link>https://damnotes.netlify.com/python/10-seaborn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/10-seaborn/</guid>
      <description>Docs
import seaborn as sns Here is a small example explained
sns.set() tips = sns.load_dataset(&amp;#34;tips&amp;#34;) # or just load a dataframe with pandas sns.relplot(x=&amp;#34;total_bill&amp;#34;, y=&amp;#34;tip&amp;#34;, col=&amp;#34;time&amp;#34;, hue=&amp;#34;smoker&amp;#34;, style=&amp;#34;smoker&amp;#34;, size=&amp;#34;size&amp;#34;, data=tips);  sns.set() set the style of the plot using matplotlib standards. doc  #code/python/modules</description>
    </item>
    
    <item>
      <title>Tensorflow</title>
      <link>https://damnotes.netlify.com/python/06-tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damnotes.netlify.com/python/06-tensorflow/</guid>
      <description>import tensorflow as tf
 from tensorflow.python.data import Dataset → select the data module in the Python API of Tensorflow and import a class
  tf.data module  Docs Dataset class (doc)  tf.feature_column module  tf.feature_column.numeric_column → create a numeric column for the model (doc).
 tf.feature_column.bucketized_column(source_column, boundaries) → takes a numeric column as input and apply binning using boundaries (doc).
 tf.feature_column.cross_column() → returns a column to perform crosses of categorical features (doc)</description>
    </item>
    
  </channel>
</rss>